tags: $:/tags/Macro
title: $:/plugins/reidgould/blc/common/Macros

\define EmptyString(strEmpty:"")
$strEmpty$
\end

\define alert(alertText:"")
  <$action-createtiddler $basetitle="Alert" component="Alert from $(currentTiddler)$" tags="$:/tags/Alert" text="$alertText$" />
\end

\define action-notify-NoActionDraggedOntoSame()
  <$action-sendmessage $message="tm-notify" $param="$:/plugins/reidgould/blc/ui/notifications/NoActionDraggedOntoSame" />
\end

\define action-notify-NoActionSearchList()
  <$action-sendmessage $message="tm-notify" $param="$:/plugins/reidgould/blc/ui/notifications/NoActionSearchList" />
\end

\define filterBoardL2(board)
[[$board$]] [[$board$]tagging[]]
\end

\define filterBoardL3(board)
[[$board$]] [[$board$]tagging[]] [[$board$]tagging[]tagging[]]
\end

\define filterBoardL2_currentBoard()
[<currentBoardTiddler>] [<currentBoardTiddler>tagging[]]
\end

\define filterBoardL3_currentBoard()
[<currentBoardTiddler>] [<currentBoardTiddler>tagging[]] [<currentBoardTiddler>tagging[]tagging[]]
\end

\define filterLists_currentBoard()
[<currentBoardTiddler>tagging[]]
\end




\define blcStoryList()
$(currentTiddler)$
\end

\define blcHistoryList()
$(EmptyString)$
\end

\define tiddlerSearchListFilter_Stage()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/searchListFilter/Stage
\end

\define tiddlerSearchListFilter_Live()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/SearchListFilter/Live
\end

\define filter-searchList()
$(filter-searchListText)$ -[$(currentBoardTiddler)$] -[$(currentBoardTiddler)$tagging[]] -[$(currentBoardTiddler)$tagging[]tagging[]] +[remove<TiddlersWithDrafts>] +[remove<TiddlersWithDraftsMain>]
\end

\define tiddlerUserFilter_Stage()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/UserFilter/Stage
\end

\define tiddlerUserFilter_Live()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/UserFilter/Live
\end

\define filter-currentList()
[<currentListTiddler>tagging[]] +[remove<TiddlersWithDrafts>] +[remove<TiddlersWithDraftsMain>] $(filter-userText)$
\end

\define tiddlerHeld()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/Held
\end
\define tiddlerHeld-ToolTip()
$(currentTitle)$ -- $(current_shorttext)$
\end

\define tiddlerListWidth_Stage()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/ListWidth/Stage
\end

\define tiddlerBoardHeight_Stage()
$:/plugins/reidgould/blc/state/$(currentBoardTiddler)$/BoardHeight/Stage
\end

\define popupTagsState()
$:/plugins/reidgould/blc/state/$(qualify)$/tagPopup
\end

\define styleTagColor()
background-color: $(tagColor)$;
\end

\define styleIconColor()
fill:$(foregroundColor)$;
\end

\define styleBoardHeightDefault()
80vh
\end
\define styleBoardHeightOption()
height: $(boardHeight)$;
\end
\define styleBoardHeight_TitleCollapsed()
max-width: calc($(boardHeight)$ - 4rem);
\end

\define styleListWidthMinDefault()
15.5rem
\end
\define styleListWidthMinOption()
min-width: $(listWidthMin)$;
\end

\define styleListWidthMaxDefault()
9999rem
\end
\define styleListWidthMaxOption()
max-width: $(listWidthMax)$;
\end

\define styleBlcList()
$(styleListWidthMinOption)$ $(styleListWidthMaxOption)$
\end




\define ResetListToTagging(listTid)
  <!-- Assign a new list in which tiddler order is as discovered by the tagging operator. -->
  <!-- The order returned by the tagging operator is determined by list field, list-before and list-after fields, and adds other tiddlers with the tag to the end. -->
  <!-- Without this step, the insertbefore listop cannot work when the action tiddler is dragged onto a tiddler that is not in the list. -->
  <!-- The drawback is that tiddlers added to the list which are not also tagged by the list are eliminated. -->
  <!-- Also, when doing this operation frequently or on larger lists, we should watch to see if performance becomes a problem. -->
  <$set name="newList" filter="[[$listTid$]tagging[]]">
    <$action-setfield $tiddler="""$listTid$""" $field="list" $value=<<newList>> />
  </$set>
\end

\define action-deleteHeldIfMatches(matchTid)
  <$set name="tiddlerHeldVal" value={{{[<tiddlerHeld>get[text]] }}} >
  <$set name="action-dhc" filter="[[$matchTid$]] -[<tiddlerHeldVal>]"
      value=""
      emptyValue="""<$action-deletetiddler $tiddler=<<tiddlerHeld>> />""" >
    <<action-dhc>>
  </$set>
  </$set>
\end

\define actionRemoveTwoWay_OneFromMany(removeTid, targetFilter_byDef)
  <$set name="manyTids" filter=<<$targetFilter_byDef$>> >
    <!-- Remove tags from the one tiddler of all target Tiddlers. -->
    <$action-listops $tiddler="""$removeTid$""" $tags="+[remove<manyTids>]" />
    <!-- Remove the one tiddler from lists of all target Tiddlers. -->
    <$list filter=<<manyTids>> variable="eachList">
      <$action-listops $tiddler=<<eachList>> $subfilter="-[[$removeTid$]]" />
    </$list>
  </$set>
  </$set>
\end

\define actionRemoveTwoWay(removeTid, targetTid)
  <!-- Remove the removeTid from this targetTid -->
  <$action-listops $tiddler="""$targetTid$""" $subfilter="-[[$removeTid$]]" />
  <!-- Remove this tag from the removeTid -->
  <$action-listops $tiddler="""$removeTid$""" $tags="-[[$targetTid$]]"/>
\end

\define actionAddTwoWay(addTid, targetTid, beforeTid)
  <$set name="beforeTid" value="$beforeTid$">
    <!-- Add the addTid to this targetTid -->
    <$action-listops $tiddler="""$targetTid$""" $subfilter="+[insertbefore:beforeTid[$addTid$]]" />
    <!-- Add this tag to the addTid -->
    <$action-listops $tiddler="""$addTid$""" $tags="[[$targetTid$]]"/>
  </$set>
\end

\define actionInsertTwoWay(insert, before, in, uniqueAmong_byDef)
  <$macrocall $name="ResetListToTagging" listTid="""$in$""" />
  <$macrocall $name="actionRemoveTwoWay_OneFromMany" removeTid="""$insert$""" targetFilter_byDef="""$uniqueAmong_byDef$""" />
  <$macrocall $name="actionAddTwoWay" addTid="""$insert$""" targetTid="""$in$""" beforeTid="""$before$""" />
\end

\define actionInsertNewTwoWay(before, in)
  <$set name="newTiddlerNameRaw" filter={{{ [[$(shortid)$]] [[New Tiddler]] -[[]] +[first[]] }}} >
  <$set name="newTiddlerName" filter="[<newTiddlerNameRaw>] -[[New Tiddler]]" value={{{ [<newTiddlerNameRaw>addprefix[tid/]] }}} emptyValue=<<newTiddlerNameRaw>> >
    <$action-createtiddler $basetitle=<<newTiddlerName>> />
    <$macrocall $name="ResetListToTagging" listTid="""$in$""" />
    <$macrocall $name="actionAddTwoWay" addTid=<<newTiddlerName>> targetTid="""$in$""" beforeTid="""$before$""" />
    <$action-sendmessage $message="tm-edit-tiddler" $param=<<newTiddlerName>> />
  </$set>
  </$set>
\end




\define blcListDroppableActions()
  <<action-checkDragOfSearchList_List>>
\end
\define action-checkDragOfSearchList_List()
  <!-- SEQUENCE AFTER blcListDroppableActions -->
  <!-- If actionTiddler is tiddlerSearchListFilter_Live, notify with no action. -->
  <$set name="action-DiffOrSearchList" filter="[<actionTiddler>] -[<tiddlerSearchListFilter_Live>]"
      value=<<action-checkNew_List>>
      emptyValue=<<action-notify-NoActionSearchList>> >
    <<action-DiffOrSearchList>>
  </$set>
\end
\define action-checkNew_List()
  <!-- SEQUENCE AFTER action-checkDragOfSearchList_List -->
  <$set name="action-ExistingOrNew" filter="[<actionTiddler>] -[[$:/plugins/reidgould/blc/action/newTiddler]]"
      value=<<action-checkSame_List>>
      emptyValue="""<$macrocall $name="actionInsertNewTwoWay" before=<<currentListTiddler>> in=<<currentBoardTiddler>> />""" >
    <<action-ExistingOrNew>>
  </$set>
\end
\define action-checkSame_List()
  <!-- SEQUENCE AFTER action-checkNew_List -->
  <$set name="action-DiffOrSame" filter="[<currentListTiddler>] -[<actionTiddler>]"
      value=<<action-dropList>>
      emptyValue=<<action-notify-NoActionDraggedOntoSame>> >
    <<action-DiffOrSame>>
  </$set>
\end
\define action-dropList()
  <!-- SEQUENCE AFTER action-checkSame_List -->
  <$macrocall $name="action-deleteHeldIfMatches" matchTid=<<actionTiddler>> />
  <$macrocall $name="actionInsertTwoWay" insert=<<actionTiddler>> before=<<currentListTiddler>> in=<<currentBoardTiddler>> uniqueAmong_byDef="filterBoardL2_currentBoard" />
\end

\define blcCardDroppableActions()
  <<action-checkDragIntoSearchList>>
\end
\define action-checkDragIntoSearchList()
  <!-- SEQUENCE AFTER blcCardDroppableActions -->
  <!-- If currentListTiddler is tiddlerSearchListFilter_Live, notify with no action. -->
  <$set name="action-DiffOrSearchList" filter="[<currentListTiddler>] -[<tiddlerSearchListFilter_Live>]"
      value=<<action-checkDragOfSearchList_Card>>
      emptyValue=<<action-notify-NoActionSearchList>> >
    <<action-DiffOrSearchList>>
  </$set>
\end
\define action-checkDragOfSearchList_Card()
  <!-- SEQUENCE AFTER action-checkDragIntoSearchList -->
  <!-- If actionTiddler is tiddlerSearchListFilter_Live, notify with no action. -->
  <$set name="action-DiffOrSearchListIsAction" filter="[<actionTiddler>] -[<tiddlerSearchListFilter_Live>]"
      value=<<action-checkNew_Card>>
      emptyValue=<<action-notify-NoActionSearchList>> >
    <<action-DiffOrSearchListIsAction>>
  </$set>
\end
\define action-checkNew_Card()
  <!-- SEQUENCE AFTER action-checkDragOfSearchList_Card -->
  <$set name="action-ExistingOrNew" filter="[<actionTiddler>] -[[$:/plugins/reidgould/blc/action/newTiddler]]"
      value="""<$macrocall $name="action-checkDragIntoSelf" />"""
      emptyValue="""<$macrocall $name="actionInsertNewTwoWay" before=<<currentCardTiddler>> in=<<currentListTiddler>> />""" >
    <<action-ExistingOrNew>>
  </$set>
\end
\define action-checkDragIntoSelf()
  <!-- SEQUENCE AFTER action-checkNew_Card -->
  <$set name="action-DiffOrSelf" filter="[<currentListTiddler>] -[<actionTiddler>]"
      value=<<action-checkSame_Card>>
      emptyValue=<<action-notify-NoActionDraggedOntoSame>> >
    <<action-DiffOrSelf>>
  </$set>
\end
\define action-checkSame_Card()
  <!-- SEQUENCE AFTER action-checkDragIntoSelf -->
  <$set name="action-DiffOrSame" filter="[<currentCardTiddler>] -[<actionTiddler>]"
      value=<<action-dropCard>>
      emptyValue=<<action-notify-NoActionDraggedOntoSame>> >
    <<action-DiffOrSame>>
  </$set>
\end
\define action-dropCard()
  <!-- SEQUENCE AFTER action-checkSame_Card -->
  <$macrocall $name="action-deleteHeldIfMatches" matchTid=<<actionTiddler>> />
  <$macrocall $name="actionInsertTwoWay" insert=<<actionTiddler>> before=<<currentCardTiddler>> in=<<currentListTiddler>> uniqueAmong_byDef="filterLists_currentBoard" />
  <!-- If action tiddler is in filterLists_currentBoard, remove it. Doing this instead of using filterBoardL2_currentBoard in uniqueAmong_byDef above avoids unnecessary rerendering of the board which causes loss of scroll position. -->
  <<action-conditionalRemoveActionTidFromList>>
\end
\define action-conditionalRemoveActionTidFromList()
  <!-- SEQUENCE AFTER action-dropCard -->
  <$set name="listTiddlers" filter="$(filterLists_currentBoard)$" >
    <$set name="action-doRemove" filter="[enlist<listTiddlers>] +[field:title<actionTiddler>]"
        value="""<$macrocall $name="actionRemoveTwoWay" removeTid=<<actionTiddler>> targetTid=<<currentBoardTiddler>> />"""
        emptyValue="" >
      <<action-doRemove>>
    </$set>
  </$set>
\end

\define action-RemoveFromBoard()
  <$macrocall $name="actionRemoveTwoWay_OneFromMany" removeTid=<<actionTiddler>> targetFilter_byDef="filterBoardL2_currentBoard" />
\end
